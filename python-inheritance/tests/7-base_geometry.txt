The ``7-base_geometry`` module
==============================

Using ``BaseGeometry``
---------------------

Importing the class from the module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Creating an instance:
    >>> bg = BaseGeometry()

Testing area method (should raise Exception):
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Testing integer_validator with valid integers:
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("height", 1)

Testing integer_validator with invalid type - string:
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

Testing integer_validator with invalid type - float:
    >>> bg.integer_validator("width", 3.14)
    Traceback (most recent call last):
    ...
    TypeError: width must be an integer

Testing integer_validator with invalid type - boolean:
    >>> bg.integer_validator("flag", True)
    Traceback (most recent call last):
    ...
    TypeError: flag must be an integer

Testing integer_validator with invalid type - None:
    >>> bg.integer_validator("value", None)
    Traceback (most recent call last):
    ...
    TypeError: value must be an integer

Testing integer_validator with invalid type - list:
    >>> bg.integer_validator("items", [1, 2, 3])
    Traceback (most recent call last):
    ...
    TypeError: items must be an integer

Testing integer_validator with invalid type - dict:
    >>> bg.integer_validator("data", {"key": "value"})
    Traceback (most recent call last):
    ...
    TypeError: data must be an integer

Testing integer_validator with invalid type - tuple:
    >>> bg.integer_validator("coords", (1, 2))
    Traceback (most recent call last):
    ...
    TypeError: coords must be an integer

Testing integer_validator with invalid type - set:
    >>> bg.integer_validator("numbers", {1, 2, 3})
    Traceback (most recent call last):
    ...
    TypeError: numbers must be an integer

Testing integer_validator with zero:
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

Testing integer_validator with negative integer:
    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ...
    ValueError: distance must be greater than 0

Testing integer_validator with negative integer:
    >>> bg.integer_validator("height", -10)
    Traceback (most recent call last):
    ...
    ValueError: height must be greater than 0

Testing integer_validator with missing arguments:
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Testing integer_validator with only one argument:
    >>> bg.integer_validator("test")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Testing integer_validator with too many arguments:
    >>> bg.integer_validator("test", 5, "extra")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

Testing class documentation:
    >>> len(BaseGeometry.__doc__) > 1
    True

Testing area method documentation:
    >>> len(BaseGeometry.area.__doc__) > 1
    True

Testing integer_validator method documentation:
    >>> len(BaseGeometry.integer_validator.__doc__) > 1
    True

Testing module documentation:
    >>> len(__import__('7-base_geometry').__doc__) > 1
    True
